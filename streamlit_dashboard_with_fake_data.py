# -*- coding: utf-8 -*-
"""Streamlit Dashboard with Fake Data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a9NgDhDBla6rFHlZjTF6aI1c3MuRIBqo
"""

import streamlit as st
import pandas as pd
import os # Import the os module for path manipulation

# --- 1. Fake Data (for testing) ---
# IMPORTANT: These paths must EXACTLY match the names and location of YOUR .txt files in C:\pdfs
# This list has been updated to precisely match the filenames from your latest screenshot.
fake_documents_data = [
    {"id": "doc_1", "title": "1. tc19-16 - Energy Supply Device ARC Recommendation Report.pdf", "file_path": r"C:\pdfs\1. tc19-16 - Energy Supply Device ARC Recommendation Report.txt", "key_topics": ["Hydrogen Fuel Cell", "Safety", "Temperature Range"], "num_requirements": 2, "num_discrepancies": 1},
    {"id": "doc_2", "title": "2. tc18-49 - Failure Mode and Effects Analysis on PEM Fuel Cell Systems for Aircraft Power Applications.pdf", "file_path": r"C:\pdfs\2. tc18-49 - Failure Mode and Effects Analysis on PEM Fuel Cell Systems for Aircraft Power Applications.txt", "key_topics": ["PEM Fuel Cell", "FMEA", "Leakage"], "num_requirements": 3, "num_discrepancies": 1},
    {"id": "doc_3", "title": "tc17-23 - Flammability of Materials in a Low-Concentration Hydrogen Environment.pdf", "file_path": r"C:\pdfs\tc17-23 - Flammability of Materials in a Low-Concentration Hydrogen Environment.txt", "key_topics": ["Flammability", "Materials", "Hydrogen Environment"], "num_requirements": 1, "num_discrepancies": 0},
    {"id": "doc_4", "title": "tc21-3 - Fuel Tank Flammability Assessment Method User's Manual - Updated for Version 11.pdf", "file_path": r"C:\pdfs\tc21-3 - Fuel Tank Flammability Assessment Method User's Manual - Updated for Version 11.txt", "key_topics": ["Fuel Tank", "Flammability", "Assessment Method"], "num_requirements": 1, "num_discrepancies": 0},
    {"id": "doc_5", "title": "tc20-9 - Aircraft Fuel Cell and Safety Management System.pdf", "file_path": r"C:\pdfs\tc20-9 - Aircraft Fuel Cell and Safety Management System.txt", "key_topics": ["Fuel Cell Safety", "Safety Management System", "Aircraft Systems"], "num_requirements": 2, "num_discrepancies": 0},
    {"id": "doc_6", "title": "tc19-55 - Aircraft Fuel Cell System.pdf", "file_path": r"C:\pdfs\tc19-55 - Aircraft Fuel Cell System.txt", "key_topics": ["Aircraft Fuel Cell", "System Design"], "num_requirements": 1, "num_discrepancies": 0},
    {"id": "doc_7", "title": "tc19-17 - Evaluation for a Lightweight Fuel Cell Containment System for Aircraft Safety.pdf", "file_path": r"C:\pdfs\tc19-17 - Evaluation for a Lightweight Fuel Cell Containment System for Aircraft Safety.txt", "key_topics": ["Fuel Cell Containment", "Lightweight Systems", "Aircraft Safety"], "num_requirements": 1, "num_discrepancies": 0},
    {"id": "doc_8", "title": "tc16-24 - Abusive Testing of Proton Exchange Membrane Hydrogen Fuel Cells.pdf", "file_path": r"C:\pdfs\tc16-24 - Abusive Testing of Proton Exchange Membrane Hydrogen Fuel Cells.txt", "key_topics": ["PEM Fuel Cell", "Abusive Testing", "Safety"], "num_requirements": 1, "num_discrepancies": 0},
    {"id": "doc_9", "title": "tc16-24.pdf", "file_path": r"C:\pdfs\tc16-24.txt", "key_topics": ["General Testing", "Safety"], "num_requirements": 1, "num_discrepancies": 0},
    {"id": "doc_10", "title": "tc21-30 - Study of Unitized Regenerative Fuel Cell Systems for Aircraft Applications.pdf", "file_path": r"C:\pdfs\tc21-30 - Study of Unitized Regenerative Fuel Cell Systems for Aircraft Applications.txt", "key_topics": ["Regenerative Fuel Cell", "Aircraft Applications"], "num_requirements": 1, "num_discrepancies": 0},
    {"id": "doc_11", "title": "tc19-16.pdf", "file_path": r"C:\pdfs\tc19-16.txt", "key_topics": ["General Aircraft", "Maintenance"], "num_requirements": 0, "num_discrepancies": 0}, # New entry
    {"id": "doc_12", "title": "tc18-49.pdf", "file_path": r"C:\pdfs\tc18-49.txt", "key_topics": ["General Fuel Cell", "Performance"], "num_requirements": 0, "num_discrepancies": 0}  # New entry
]

# Update fake_entities_data to include entries for new documents (if applicable)
fake_entities_data = {
    "doc_1": [{"text": "hydrogen fuel cells", "type": "AIRCRAFT_SYSTEM"}, {"text": "-40C", "type": "TEMPERATURE"}, {"text": "+85C", "type": "TEMPERATURE"}, {"text": "pressure relief valve", "type": "COMPONENT"}, {"text": "FAR Part 25.903(b)", "type": "REGULATION_NUMBER"}, {"text": "flammability risks", "type": "RISK_FACTOR"}, {"text": "AC 20-138", "type": "REGULATION_NUMBER"}],
    "doc_2": [{"text": "PEM fuel cell systems", "type": "AIRCRAFT_SYSTEM"}, {"text": "80C", "type": "TEMPERATURE"}, {"text": "Leakage detection", "type": "TEST_PROCEDURE"}, {"text": "FAR Part 25.903(b)", "type": "REGULATION_NUMBER"}, {"text": "pressure relief valve", "type": "COMPONENT"}, {"text": "550 PSI", "type": "PRESSURE"}],
    "doc_3": [{"text": "ASTM E1354", "type": "CERTIFICATION_STANDARD"}, {"text": "4%", "type": "CONCENTRATION"}, {"text": "hazardous", "type": "RISK_FACTOR"}, {"text": "ignition", "type": "RISK_FACTOR"}],
    "doc_4": [{"text": "fuel tank flammability", "type": "SAFETY_ASPECT"}, {"text": "Version 11", "type": "VERSION"}],
    "doc_5": [{"text": "safety management system", "type": "SYSTEM"}, {"text": "aircraft fuel cell", "type": "AIRCRAFT_SYSTEM"}],
    "doc_6": [{"text": "aircraft fuel cell system", "type": "AIRCRAFT_SYSTEM"}, {"text": "system design", "type": "DESIGN_ASPECT"}],
    "doc_7": [{"text": "lightweight fuel cell containment", "type": "COMPONENT"}, {"text": "aircraft safety", "type": "SAFETY_ASPECT"}],
    "doc_8": [{"text": "proton exchange membrane", "type": "FUEL_CELL_TYPE"}, {"text": "abusive testing", "type": "TEST_PROCEDURE"}],
    "doc_9": [{"text": "tc16-24", "type": "DOCUMENT_ID"}, {"text": "general testing", "type": "TEST_PROCEDURE"}],
    "doc_10": [{"text": "unitized regenerative fuel cell", "type": "FUEL_CELL_TYPE"}, {"text": "aircraft applications", "type": "AIRCRAFT_TYPE"}],
    "doc_11": [{"text": "tc19-16", "type": "DOCUMENT_ID"}], # Placeholder for the short name
    "doc_12": [{"text": "tc18-49", "type": "DOCUMENT_ID"}]  # Placeholder for the short name
}

# Expand fake_checklist_data and fake_discrepancy_data as needed to relate to new docs
# For now, keeping them focused on doc_1, doc_2, doc_3 for the simulated discrepancy example.
# You will expand these significantly with your real AI pipeline.

fake_checklist_data = [
    {"id": "req_001", "description": "Fuel cells must operate safely between -40°C and +85°C.", "related_docs": ["doc_1"], "relevant_section": "Doc 1, Sec 3.1.2", "related_entities": ["Hydrogen Fuel Cell", "Temperature Range"], "status": "Pending", "notes": "", "dependencies": [], "associated_discrepancy": True},
    {"id": "req_002", "description": "Pressure relief valve per FAR Part 25.903(b).", "related_docs": ["doc_1", "doc_2"], "relevant_section": "Doc 1, Sec 3.1.2; Doc 2, Para 2", "related_entities": ["Pressure Relief Valve", "FAR Part 25.903(b)"], "status": "In Progress", "notes": "Eng review needed.", "dependencies": ["req_001"], "associated_discrepancy": True},
    {"id": "req_003", "description": "PEM fuel cell max temp 80°C.", "related_docs": ["doc_2"], "relevant_section": "Doc 2, Para 1", "related_entities": ["PEM Fuel Cell System", "Temperature Limit"], "status": "Pending", "notes": "", "dependencies": [], "associated_discrepancy": False},
    {"id": "req_004", "description": "Materials must meet fire resistance (ASTM E1354).", "related_docs": ["doc_3"], "relevant_section": "Doc 3, Para 1", "related_entities": ["Materials", "ASTM E1354"], "status": "Completed", "notes": "Report filed.", "dependencies": [], "associated_discrepancy": False},
    # Add a few more to show more variety
    {"id": "req_005", "description": "Fuel tank flammability assessment must be performed.", "related_docs": ["doc_4"], "relevant_section": "Doc 4, Sec 2.1", "related_entities": ["Fuel Tank", "Flammability"], "status": "Pending", "notes": "", "dependencies": [], "associated_discrepancy": False},
    {"id": "req_006", "description": "Safety Management System must integrate fuel cell operations.", "related_docs": ["doc_5"], "relevant_section": "Doc 5, Ch 3", "related_entities": ["Safety Management System", "Fuel Cell Safety"], "status": "In Progress", "notes": "SOPs being drafted.", "dependencies": [], "associated_discrepancy": False},
    {"id": "req_007", "description": "Lightweight containment system evaluation is necessary for aircraft safety.", "related_docs": ["doc_7"], "relevant_section": "Doc 7, Sec 1", "related_entities": ["Lightweight Systems", "Aircraft Safety"], "status": "Pending", "notes": "", "dependencies": [], "associated_discrepancy": False}
]

fake_discrepancy_data = [
    {"id": "disc_001", "conflicting_requirements": ["req_001", "req_003"], "nature_of_conflict": "Temperature operating range discrepancy: Doc 1 allows up to +85°C, but Doc 2 states maximum 80°C for PEM systems. Need clarity on specific PEM fuel cell limits.", "involved_docs": ["doc_1", "doc_2"], "proposed_resolution_notes": "Proposed to follow 80C limit for all PEM systems to be conservative.", "clarity_request_status": "Drafted"},
    {"id": "disc_002", "conflicting_requirements": ["req_002"], "nature_of_conflict": "Pressure relief valve activation pressure: Doc 2 specifies 550 PSI, but Doc 1 (and FAR Part 25.903b) is general. Need specific activation pressure for this valve based on system design.", "involved_docs": ["doc_1", "doc_2"], "proposed_resolution_notes": "Awaiting design specifications before finalizing pressure setting.", "clarity_request_status": "Not Sent"}
]

fake_qa_responses = {
    "what are the flammability requirements?": {
        "answer": "Materials in hydrogen environments must meet fire resistance standards like ASTM E1354. Hydrogen concentrations exceeding 4% are considered hazardous for ignition. All wiring insulation also requires special attention.",
        "sources": ["doc_3"]
    },
    "what is the required temperature for fuel cells?": {
        "answer": "Documents indicate a general operating range of -40°C to +85°C. For PEM fuel cell systems, the maximum operating temperature should not exceed 80°C.",
        "sources": ["doc_1", "doc_2"]
    },
    "tell me about fuel tank flammability.": {
        "answer": "The fuel tank flammability assessment method is detailed in tc21-3 (Doc 4). It outlines procedures to evaluate the fire safety aspects of fuel tanks.",
        "sources": ["doc_4"]
    },
    "what is abusive testing?": { # New QA
        "answer": "Abusive testing for Proton Exchange Membrane (PEM) Hydrogen Fuel Cells is covered in document tc16-24 (Doc 8). This testing evaluates their behavior under extreme conditions.",
        "sources": ["doc_8"]
    }
}

# Helper to map doc IDs to titles
def get_doc_title(doc_id):
    for doc in fake_documents_data:
        if doc['id'] == doc_id:
            return doc['title']
    return "Unknown Document"

# Function to load content from file
def load_document_content(file_path):
    try:
        abs_path = os.path.abspath(file_path)
        with open(abs_path, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        st.error(f"Error: Document file not found at {file_path}. Please ensure it exists in C:\\pdfs and the file name matches exactly.")
        return f"File Not Found: {file_path}"
    except Exception as e:
        st.error(f"Error reading file {file_path}: {e}")
        return f"Error reading file: {e}"

# Modified get_doc_content to read from file
def get_doc_content_from_data(doc_id):
    for doc in fake_documents_data:
        if doc['id'] == doc_id:
            return load_document_content(doc['file_path'])
    return "Document content not found."


# --- Streamlit App Layout ---
st.set_page_config(layout="wide", page_title="Hydrogen Certification Dashboard")

st.title("Hydrogen Aircraft Certification Assistant Dashboard")

# --- Sidebar ---
st.sidebar.header("Navigation")
page = st.sidebar.radio("Go to", ["Checklist Overview", "Discrepancy Tracker", "Document Explorer", "Document Comparator", "Ask a Question", "Generate Clarity Request"])

# Global Filters (can be moved to main content if preferred)
st.sidebar.header("Global Filters")
st.sidebar.selectbox("Aircraft System", ["All", "Hydrogen Fuel Cell", "PEM Fuel Cell System", "Wing Structure"])
st.sidebar.selectbox("FAR Part", ["All", "Part 25", "Part 23", "Part 91"])
st.sidebar.selectbox("Severity", ["All", "Critical", "Major", "Minor"])

# --- Main Content Area ---
if page == "Ask a Question":
    st.header("Ask a Question")
    query = st.text_input("Enter your question:", "what are the flammability requirements?")
    if st.button("Get Answer"):
        response = fake_qa_responses.get(query.lower(), {"answer": "Sorry, I don't have a canned answer for that question in the fake data.", "sources": []})
        st.subheader("AI Answer:")
        st.write(response["answer"])
        if response["sources"]:
            source_titles = [get_doc_title(d_id) for d_id in response["sources"]]
            st.caption(f"Sources: {', '.join(source_titles)}")

elif page == "Checklist Overview":
    st.header("Certification Requirements Checklist")
    df_checklist = pd.DataFrame(fake_checklist_data)

    st.subheader("Filters:")
    search_term = st.text_input("Search checklist items:")
    status_filter = st.selectbox("Filter by Status:", ["All", "Pending", "In Progress", "Completed", "Requires Clarity"])

    filtered_df = df_checklist.copy()
    if search_term:
        filtered_df = filtered_df[filtered_df['description'].str.contains(search_term, case=False)]
    if status_filter != "All":
        filtered_df = filtered_df[filtered_df['status'] == status_filter]

    # Format related_docs to be clickable links (conceptually, not actual links here)
    filtered_df['Related Documents'] = filtered_df['related_docs'].apply(lambda doc_ids: ", ".join([get_doc_title(d_id) for d_id in doc_ids]))
    filtered_df['Related Entities'] = filtered_df['related_entities'].apply(lambda x: ", ".join(x))

    display_cols = ['id', 'description', 'Related Documents', 'relevant_section', 'Related Entities', 'status', 'associated_discrepancy', 'notes']
    st.dataframe(filtered_df[display_cols], height=400, use_container_width=True)

    # Example of interacting with checklist items (simplified for fake data)
    st.subheader("Update Checklist Item (Example)")
    item_to_update = st.selectbox("Select Item ID to update:", df_checklist['id'].tolist())
    new_status = st.selectbox("New Status:", ["Pending", "In Progress", "Completed", "Requires Clarity"])
    if st.button(f"Update {item_to_update}"):
        st.info(f"Feature to update status for '{item_to_update}' to '{new_status}' would be here (not saved in fake data).")


elif page == "Discrepancy Tracker":
    st.header("Identified Discrepancies & Clarity Requests")
    df_discrepancies = pd.DataFrame(fake_discrepancy_data)

    st.subheader("Filters:")
    disc_search_term = st.text_input("Search discrepancies:")
    disc_status_filter = st.selectbox("Filter by Clarity Status:", ["All", "Not Sent", "Drafted", "Sent to FAA", "Response Received", "Resolved"])

    filtered_discs = df_discrepancies.copy()
    if disc_search_term:
        filtered_discs = filtered_discs[filtered_discs['nature_of_conflict'].str.contains(disc_search_term, case=False)]
    if disc_status_filter != "All":
        filtered_discs = filtered_discs[filtered_discs['clarity_request_status'] == disc_status_filter]

    # Format involved_docs and conflicting_requirements
    filtered_discs['Involved Documents'] = filtered_discs['involved_docs'].apply(lambda doc_ids: ", ".join([get_doc_title(d_id) for d_id in doc_ids]))
    filtered_discs['Conflicting Requirements'] = filtered_discs['conflicting_requirements'].apply(lambda req_ids: ", ".join(req_ids))

    display_cols_disc = ['id', 'Conflicting Requirements', 'nature_of_conflict', 'Involved Documents', 'proposed_resolution_notes', 'clarity_request_status']
    st.dataframe(filtered_discs[display_cols_disc], height=400, use_container_width=True)

    st.subheader("Generate Clarity Request (Example)")
    selected_disc = st.selectbox("Select Discrepancy ID for request:", df_discrepancies['id'].tolist())
    if st.button(f"Generate Draft for {selected_disc}"):
        disc_details = df_discrepancies[df_discrepancies['id'] == selected_disc].iloc[0]
        st.info(f"Drafting clarity request for Discrepancy ID: {selected_disc}\n"
                f"Nature: {disc_details['nature_of_conflict']}\n"
                f"This would generate a document (PDF/Word) with details for FAA.")


elif page == "Document Explorer":
    st.header("Document Library & Extracted Insights")
    df_docs = pd.DataFrame(fake_documents_data)

    st.subheader("Search Documents:")
    doc_search = st.text_input("Search document titles or topics:")
    filtered_docs = df_docs.copy()
    if doc_search:
        filtered_docs = filtered_docs[
            filtered_docs['title'].str.contains(doc_search, case=False) |
            filtered_docs['key_topics'].apply(lambda x: any(doc_search.lower() in topic.lower() for topic in x))
        ]

    for index, row in filtered_docs.iterrows():
        st.markdown(f"**[{row['title']}](file://{os.path.abspath(row['file_path'])})** (Click to open local file - browser security may restrict)")
        st.write(f"**Key Topics:** {', '.join(row['key_topics'])}")
        st.write(f"**Requirements Identified:** {row['num_requirements']}")
        st.write(f"**Discrepancies Detected:** {row['num_discrepancies']}")
        content_preview = load_document_content(row['file_path'])
        st.write(f"**Sample Content:** *{content_preview[:300]}...*") # Show first 300 chars
        st.markdown("---") # Separator

elif page == "Document Comparator":
    st.header("Compare Two Documents")

    # Get available document IDs and titles
    doc_options = {doc['title']: doc['id'] for doc in fake_documents_data}
    selected_title_1 = st.selectbox("Select Document 1:", list(doc_options.keys()), index=0)
    default_idx_2 = 1 if len(doc_options) > 1 else 0
    if selected_title_1 == list(doc_options.keys())[default_idx_2] and len(doc_options) > 2:
        default_idx_2 = 2
    selected_title_2 = st.selectbox("Select Document 2:", list(doc_options.keys()), index=default_idx_2)


    doc_id_1 = doc_options[selected_title_1]
    doc_id_2 = doc_options[selected_title_2]

    col1, col2 = st.columns(2)

    with col1:
        st.subheader(f"Document 1: {selected_title_1}")
        st.text_area("Content:", get_doc_content_from_data(doc_id_1), height=300)
        st.markdown(f"**Key Topics:** {', '.join([d['key_topics'] for d in fake_documents_data if d['id'] == doc_id_1][0])}")
        st.markdown(f"**Extracted Entities:**")
        for entity in fake_entities_data.get(doc_id_1, []):
            st.markdown(f"- {entity['text']} (`{entity['type']}`)")

    with col2:
        st.subheader(f"Document 2: {selected_title_2}")
        st.text_area("Content:", get_doc_content_from_data(doc_id_2), height=300)
        st.markdown(f"**Key Topics:** {', '.join([d['key_topics'] for d in fake_documents_data if d['id'] == doc_id_2][0])}")
        st.markdown(f"**Extracted Entities:**")
        for entity in fake_entities_data.get(doc_id_2, []):
            st.markdown(f"- {entity['text']} (`{entity['type']}`)")

    st.markdown("---")
    st.subheader("Comparison Result (Simulated Discrepancy Detection)")

    # Simulated comparison logic based on the updated document names
    # You can expand this logic as your AI becomes more sophisticated
    if ("tc19-16 - Energy Supply Device ARC Recommendation Report" in selected_title_1 and "tc18-49 - Failure Mode and Effects Analysis on PEM Fuel Cell Systems" in selected_title_2) or \
       ("tc18-49 - Failure Mode and Effects Analysis on PEM Fuel Cell Systems" in selected_title_1 and "tc19-16 - Energy Supply Device ARC Recommendation Report" in selected_title_2):
        st.warning("🚨 **Potential Discrepancy Detected!**")
        st.markdown("**Nature of Conflict:**")
        st.write("These documents likely present a temperature operating range discrepancy. One may allow up to +85°C for hydrogen fuel cells, while the other specifies a maximum of 80°C for PEM fuel cell systems. This requires clarity for PEM-specific limits.")
        st.write("This aligns with **Discrepancy ID: `disc_001`** in the Discrepancy Tracker.")
    elif ("tc19-16.pdf" in selected_title_1 and "tc18-49.pdf" in selected_title_2) or \
         ("tc18-49.pdf" in selected_title_1 and "tc19-16.pdf" in selected_title_2):
        st.info("These are general documents (based on their short titles). Your AI would analyze their content for subtle relationships or potential overlaps. No direct conflict defined in fake data.")
    elif ("tc16-24 - Abusive Testing" in selected_title_1 and "tc16-24.pdf" in selected_title_2) or \
         ("tc16-24.pdf" in selected_title_1 and "tc16-24 - Abusive Testing" in selected_title_2):
        st.info("These documents share a common number (tc16-24). Your AI could confirm if the general 'tc16-24.txt' document acts as a summary or a foundational document for the more specific 'Abusive Testing' report.")
    elif ("tc21-3 - Fuel Tank Flammability Assessment Method User's Manual" in selected_title_1 and "tc20-9 - Aircraft Fuel Cell and Safety Management System" in selected_title_2) or \
         ("tc20-9 - Aircraft Fuel Cell and Safety Management System" in selected_title_1 and "tc21-3 - Fuel Tank Flammability Assessment Method User's Manual" in selected_title_2):
        st.info("These documents are related to fuel tank flammability and overall aircraft fuel cell safety management. Your AI could identify how specific flammability assessments feed into broader safety protocols.")
    else:
        st.info("No direct *pre-defined* conflict in fake data for these specific documents. Your AI would perform deeper analysis to find subtle relationships or inconsistencies.")


elif page == "Generate Clarity Request":
    st.header("Generate New Clarity Request")
    st.write("This section would allow you to draft a new clarity request from scratch.")
    request_title = st.text_input("Request Title:")
    request_details = st.text_area("Detailed Request:")
    st.selectbox("Relates to Discrepancy ID (Optional):", ["None"] + [d['id'] for d in fake_discrepancy_data])
    st.selectbox("Relates to Checklist Item ID (Optional):", ["None"] + [r['id'] for r in fake_checklist_data])
    if st.button("Generate Draft Document"):
        st.info(f"Draft for '{request_title}' generated. (This would create a PDF/Word file).")